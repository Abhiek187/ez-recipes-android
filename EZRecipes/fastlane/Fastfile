# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Run unit tests"
  lane :test do
    # Runs: gradlew test -p .
    gradle(task: "test")
  end

  desc "Run instrumented tests"
  lane :ui_test do |options|
    # Accept licenses: yes | sdkmanager --licenses > /dev/null
    # Install build tools, platform tools, and platforms: sdkmanager --install 'build-tools;33.0.0' platform-tools 'platforms;android-32' > /dev/null
    # Install emulator (channel 0 = stable packages): sdkmanager --install emulator --channel=0 > /dev/null
    # Install system images: sdkmanager --install 'system-images;android-32;google_apis;x86_64' --channel=0 > /dev/null
    # Create test AVD: echo no | avdmanager create avd --force -n test --abi 'google_apis/x86_64' --package 'system-images;android-32;google_apis;x86_64'
    # Configure AVD with 2 cores: echo 'hw.cpu.ncore=2' >> ~/.android/avd/test.avd/config.ini
    # Boot up the emulator: emulator -avd test -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim &
    # Check if the emulator has booted: adb shell getprop sys.boot_completed
    # Press the menu button: adb shell input keyevent 82
    # Disable animations: adb shell settings put global window_animation_scale 0.0
    #                     adb shell settings put global transition_animation_scale 0.0
    #                     adb shell settings put global animator_duration_scale 0.0
    # Run instrumented tests: gradlew connectedAndroidTest
    # Kill emulator: adb -s emulator-5554 emu kill
    ANDROID_HOME = ENV["ANDROID_SDK_ROOT"] || ENV["ANDROID_HOME"]
    ANDROID_CMD_PATH = "#{ANDROID_HOME}/cmdline-tools/latest/bin"
    ANDROID_EMULATOR_PATH = "#{ANDROID_HOME}/emulator"
    ADB_PATH = "#{ANDROID_HOME}/platform-tools"
    BUILD_TOOLS_VERSION = "33.0.0"

    api_level = options[:api]
    AVD_NAME = "test"
    AVD_PORT = 5556
    EMU_SERIAL = "emulator-#{AVD_PORT}"

    # Install Android SDK
    sh "yes | #{ANDROID_CMD_PATH}/sdkmanager --licenses > /dev/null"
    sh "#{ANDROID_CMD_PATH}/sdkmanager --install 'build-tools;#{BUILD_TOOLS_VERSION}' platform-tools 'platforms;android-#{api_level}' > /dev/null"
    sh "#{ANDROID_CMD_PATH}/sdkmanager --install emulator --channel=0 > /dev/null"
    sh "#{ANDROID_CMD_PATH}/sdkmanager --install 'system-images;android-#{api_level};google_apis;x86_64' --channel=0 > /dev/null"

    # Launch Emulator
    sh "echo no | #{ANDROID_CMD_PATH}/avdmanager create avd --force -n #{AVD_NAME} --abi 'google_apis/x86_64' --package 'system-images;android-#{api_level};google_apis;x86_64'"
    sh "echo 'hw.cpu.ncore=2' >> ~/.android/avd/#{AVD_NAME}.avd/config.ini"
    sh "#{ANDROID_EMULATOR_PATH}/emulator -port #{AVD_PORT} -avd #{AVD_NAME} -no-window -gpu swiftshader_indirect -no-snapshot -noaudio -no-boot-anim &> /dev/null &"

    sh "#{ADB_PATH}/adb -s #{EMU_SERIAL} wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'"
    sh "#{ADB_PATH}/adb -s #{EMU_SERIAL} shell settings put global window_animation_scale 0.0"
    sh "#{ADB_PATH}/adb -s #{EMU_SERIAL} shell settings put global transition_animation_scale 0.0"
    sh "#{ADB_PATH}/adb -s #{EMU_SERIAL} shell settings put global animator_duration_scale 0.0"

    gradle(task: "connectedAndroidTest")

    sh "#{ADB_PATH}/adb -s #{EMU_SERIAL} emu kill"
  end

  desc "Generate screenshots for the Play Store"
  lane :screenshots do
    # Clean build: gradlew clean -p .
    gradle(task: "clean")
    # Create app APK: gradlew assembleDebug -p .
    build_android_app(
        task: "assemble",
        build_type: "Debug"
    )
    # Create tests APK: gradlew assembleAndroidTest -p .
    build_android_app(
        task: "assemble",
        build_type: "AndroidTest"
    )
    # Clear screenshots on the device: adb -s emulator-5554 shell rm -rf /sdcard/Android/data/com.abhiek.ezrecipes/files/screengrab/en-US/images/screenshots
    # Install app APK: adb -s emulator-5554 install -t -r app/build/outputs/apk/debug/app-debug.apk
    # Install tests APK: adb -s emulator-5554 install -t -r app/build/outputs/apk/androidTest/debug/app-debug-androidTest.apk
    # Grant permission to change the device's locale: adb -s emulator-5554 shell pm grant com.abhiek.ezrecipes android.permission.CHANGE_CONFIGURATION
    # Grant permission to write to external storage: adb -s emulator-5554 shell pm grant com.abhiek.ezrecipes android.permission.WRITE_EXTERNAL_STORAGE
    # Grant permission to read from external storage: adb -s emulator-5554 shell pm grant com.abhiek.ezrecipes android.permission.READ_EXTERNAL_STORAGE
    # Grant permission to clean the status bar (by accessing system services): adb -s emulator-5554 shell pm grant com.abhiek.ezrecipes android.permission.DUMP
    # Enable Demo Mode for the Android System UI: adb -s emulator-5554 shell settings put global sysui_demo_allowed 1
    # Stop existing app & test processes: adb -s emulator-5554 shell am force-stop com.abhiek.ezrecipes[.test]
    # Run instrumented tests for each locale: adb -s emulator-5554 shell am instrument --no-window-animation -w -e testLocale en-US --no-hidden-api-checks -e appendTimestamp false -e class com.abhiek.ezrecipes.EZRecipesInstrumentedTest com.abhiek.ezrecipes.test/androidx.test.runner.AndroidJUnitRunner
    # Get captured screenshots from external storage: adb -s emulator-5554 pull /sdcard/Android/data/com.abhiek.ezrecipes/files/screengrab/en-US/images/screenshots /tmp/d20230107-31863-xk272
    # Get screenshots from internal storage (using run-as for root access): adb -s emulator-5554 shell run-as com.abhiek.ezrecipes "tar -cC /data/data/com.abhiek.ezrecipes/app_screengrab/en-US/images screenshots" | tar -xv -f- -C /tmp/d20230108-32165-9dm6e7
    capture_android_screenshots
  end

  desc "Submit a new internal build to the Play Store"
  lane :internal do |options|
    # Get the latest version name and code from Google Play
    version_names = google_play_track_release_names
    version_codes = google_play_track_version_codes

    if version_names.empty? or version_codes.empty?
      UI.user_error!("No version names or codes found on Google Play")
    end

    latest_version_name = version_names[0]
    major, minor, patch = latest_version_name.split(".")
    latest_version_code = version_codes[0]

    # Check what type of update this is to determine how to update the version name
    update_type = UI.select(
        "What type of update is this? (major.minor.patch)",
        ["major", "minor", "patch"]
    )

    case update_type
    when "major"
      # Make the lower versions 0 when the upper version is incremented
      new_version_name = (major.to_i + 1).to_s + ".0.0"
    when "minor"
      new_version_name = "#{major}." + (minor.to_i + 1).to_s + ".0"
    else
      new_version_name = "#{major}.#{minor}." + (patch.to_i + 1).to_s
    end

    new_version_code = latest_version_code + 1
    UI.message "Updating the version name: #{latest_version_name} --> #{new_version_name}"
    UI.message "Updating the version code: #{latest_version_code} --> #{new_version_code}"

    # Check if the release notes have been created for the new version code
    changelog_path = "metadata/android/en-US/changelogs/#{new_version_code}.txt"
    unless File.file?(changelog_path)
      UI.user_error!("No release notes written for version code #{new_version_code}")
    end

    # Update the version name using semver: "MAJOR.MINOR.PATCH"
    # sed -i 's/versionName [0-9a-zA-Z -_]*/versionName "'"$new_version_name"'"/' ../app/build.gradle
    sh("sed -i 's/versionName [0-9a-zA-Z -_]*/versionName \"\'\"#{new_version_name}\"\'\"/' ../app/build.gradle")

    # Auto-increment the version code
    # sed -i 's/versionCode [0-9a-zA-Z -_]*/versionCode '$new_version_code'/' ../app/build.gradle
    sh("sed -i 's/versionCode [0-9a-zA-Z -_]*/versionCode '#{new_version_code}'/' ../app/build.gradle")

    gradle(task: "clean assembleRelease")
    upload_to_play_store(
      track: "internal",
      validate_only: true,
      changes_not_sent_for_review: true
    )
  end

  desc "Deploy a new version to the Play Store"
  lane :deploy do
    # Promote the build from internal to production
    upload_to_play_store(
      track_promote_to: "production",
      validate_only: true,
      changes_not_sent_for_review: true
    )
  end
end
